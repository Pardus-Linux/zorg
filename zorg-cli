#!/usr/bin/python
# -*- coding: utf-8 -*-
#
# Copyright (C) 2005-2009 TUBITAK/UEKAE
#
# This program is free software; you can redistribute it and/or modify it under
# the terms of the GNU General Public License as published by the Free
# Software Foundation; either version 2 of the License, or (at your option)
# any later version.
#
# Please read the COPYING file.

import os
import sys
import optparse

import comar
import zorg
import zorg.probe
from zorg.consts import package_sep
from zorg.utils import *

zorg_info = " Xorg AutoConfiguration tool"

link = comar.Link()

def safe():
    if link.Xorg.Display["zorg"].safeConfig():
        link.Xorg.Display["zorg"].syncConfigs()
        print "Initialized a safe configuration using VESA driver."
    else:
        print "Failed to create a safe configuration with VESA driver."

def probe(opts):
    if link.Xorg.Display["zorg"].initialConfig():
        link.Xorg.Display["zorg"].syncConfigs()
        print "Created an initial configuration for your video device."
    else:
        print "An error occured while creating an initial configuration."

def setDriver(driver):
    # Needed for compatibility with old zorg versions
    oldnames = {
            "fglrx/ati-drivers":            "fglrx",
            "nvidia/xorg-video-nvidia96":   "nvidia96",
            "nvidia/xorg-video-nvidia173":  "nvidia173",
            "nvidia/xorg-video-nvidia185":  "nvidia185",
            }
    if oldnames.has_key(driver):
        driver = oldnames[driver]

    if package_sep in driver:
        drv, pkg = driver.split(package_sep, 1)
        if pkg.replace("-", "_") not in zorg.probe.listDriverPackages():
            print "Package is not installed: %s" % pkg
            sys.exit(1)

    link.Xorg.Display["zorg"].setDriver(driver)
    link.Xorg.Display["zorg"].syncConfigs()
    print "Driver changed to %s." % driver


if __name__ == "__main__":
    parser = optparse.OptionParser(description = "%s version %s"
                                    % (zorg_info, zorg.versionString()))

    parser.add_option("-s", "--safe", action="store_true",
        dest="safe", default=False,
        help="setup VESA config without probing hardware")

    parser.add_option("-p", "--probe", action="store_true",
        dest="probe", default=False,
        help="force probing all devices, even if xorg.conf exists")

    parser.add_option("-d", "--driver", action="store", type="string",
        dest="driver", default=None, metavar="DRIVER[%sPACKAGE]" % package_sep,
        help="set video card driver to DRIVER")

    parser.add_option("-k", "--keymap", action="store", type="string",
        dest="keymap", default=None, metavar="LAYOUT[/VARIANT]",
        help="changes keyboard map")

    opts, args = parser.parse_args()

    if opts.safe:
        safe()

    elif opts.probe:
        probe(opts)

    elif opts.driver:
        setDriver(opts.driver)

    elif opts.keymap:
        keymap = opts.keymap.split("/", 1)
        link.Xorg.Display["zorg"].setKeymap(*keymap)

    else:
        parser.print_help()
