#!/usr/bin/python
# -*- coding: utf-8 -*-
#
# Copyright (C) 2005-2007 TUBITAK/UEKAE
#
# This program is free software; you can redistribute it and/or modify it under
# the terms of the GNU General Public License as published by the Free
# Software Foundation; either version 2 of the License, or (at your option)
# any later version.
#
# Please read the COPYING file.


import os
import subprocess
import sys
import time
import sha
from optparse import OptionParser


### Some defaults ###
zorg_info = " Xorg AutoConfiguration tool"
zorg_version = "0.5"

xorg_conf = "/etc/X11/xorg.conf"
activeCard = "/etc/X11/activeCard"
xorg_off = "/var/run/xorg_off"
xorg_lock = "/tmp/.X0-lock"
xdriverlist = "/usr/lib/X11/xdriverlist"
MonitorsDB = "/usr/lib/X11/MonitorsDB"

driver_path = "/usr/lib/xorg/modules/drivers"
xkb_path = "/usr/share/X11/xkb/symbols/pc"

truecolor_cards = ["i810", "intel", "nv", "nvidia", "radeon", "fglrx", "openchrome"]
lcd_drivers = [ "nv", "nvidia", "ati", "openchrome", "i810", "intel", "sis", "savage", "neomagic"]
touchpad_devices = ["synaptics", "alps"]
default_kmap = "trq"


### Templates ###
template_videocard = """
Section "Device"
    Screen %(N)s
    Identifier "VideoCard%(N)s"
    Driver     "%(DRIVER)s"
    VendorName "%(VENDORNAME)s"
    BoardName  "%(BOARDNAME)s"
    %(BUSID)s
    %(AIGLX_OPTS)s
EndSection
"""

template_monitor = """
Section "Monitor"
    Identifier  "Monitor%(N)s"
    VendorName  "%(VENDOR)s"
    ModelName   "%(MODEL)s"
    HorizSync    %(HSYNC)s
    VertRefresh  %(VREF)s

%(MODELINES)s
EndSection
"""

template_synaptics = """
Section "InputDevice"
    Identifier "Touchpad"
    Driver     "synaptics"
    Option     "Protocol" "auto-dev"
    # Option     "Device" "/dev/input/mouse0"
    Option     "LeftEdge" "1700"
    Option     "RightEdge" "5300"
    Option     "TopEdge" "1700"
    Option     "BottomEdge" "4200"
    Option     "FingerLow" "25"
    Option     "FingerHigh" "30"
    Option     "MaxTapTime" "180"
    Option     "MaxTapMove" "220"
    Option     "VertScrollDelta" "100"
    Option     "MinSpeed" "0.09"
    Option     "MaxSpeed" "0.18"
    Option     "AccelFactor" "0.0015"
    Option     "SHMConfig" "true"
    # Option     "ClickTime"  "0"
EndSection
"""

template_alps = """
Section "InputDevice"
    Identifier "Touchpad"
    Driver     "synaptics"
    Option     "Protocol" "auto-dev"
    Option     "LeftEdge" "130"
    Option     "RightEdge" "840"
    Option     "TopEdge" "130"
    Option     "BottomEdge" "640"
    Option     "FingerLow" "7"
    Option     "FingerHigh" "8"
    Option     "MaxTapTime" "300"
    Option     "MaxTapMove" "110"
    Option     "EmulateMidButtonTime" "75"
    Option     "VertScrollDelta" "20"
    Option     "HorizScrollDelta" "20"
    Option     "MinSpeed" "0.60"
    Option     "MaxSpeed" "1.10"
    Option     "AccelFactor" "0.030"
    Option     "EdgeMotionMinSpeed" "200"
    Option     "EdgeMotionMaxSpeed" "200"
    Option     "UpDownScrolling" "1"
    Option     "CircularScrolling" "1"
    Option     "CircScrollDelta" "0.1"
    Option     "CircScrollTrigger" "2"
    Option     "SHMConfig" "true"
    Option     "Emulate3Buttons" "true"
    # Option     "ClickTime"  "0"
EndSection
"""

composite_option = 'Option "Composite" "Enable"'

template_nvidia_aiglx = """
    Option "AddARGBGLXVisuals" "true"
    Option "AllowGLXWithComposite" "true"
"""

template_screen = """
Section "Screen"
    Identifier "Screen%(N)s"
    Device     "VideoCard%(N)s"
    Monitor    "Monitor%(N)s"
    DefaultDepth %(DEPTH)s
    Subsection "Display"
        Depth    %(DEPTH)s
        Modes    %(MODES)s
    EndSubsection
EndSection
"""

template_probe_display = """
Section "ServerLayout"
    Identifier "COMAR Configured Layout"
    Screen   0 "Screen0" 0 0
EndSection

Section "Monitor"
    Identifier "Monitor0"
EndSection

Section "Screen"
    Identifier "Screen0"
    Device     "Card0"
EndSection

Section "Device"
    Identifier "Card0"
    Driver     "%(PROBE_DRIVER)s"
EndSection
"""

template_jail = """    # Prevent virtual terminal switching
    Option     "DontVTSwitch" "true"
    # Prevent killing X
    Option     "DontZap" "true"
"""

template_header = """################################################################
#
#  Autoconfigured config file for Xorg
#  Created by Zorg %(ZORG_VERSION)s on %(DATE)s
#
#  ESSENTIAL: %(SUM)s
#
"""
template_main = """
Section "Module"
    Load "dbe"      # Double buffer extension
    Load "extmod"
    SubSection "extmod"
        Option "omit xfree86-dga" # don't initialise the DGA extension
    EndSubSection
    Load "type1"
    Load "freetype"
    Load "record"
    Load "xtrap"
    Load "glx"
    Load "dri"
    Load "v4l"
    %(SYNAPTICS_MOD)s
EndSection

Section "Extensions"
    %(COMPOSITE)s
EndSection

Section "dri"
    Mode 0666
EndSection

Section "Files"
    RgbPath  "/usr/lib/X11/rgb"
    FontPath "/usr/share/fonts/misc/"
    FontPath "/usr/share/fonts/dejavu/"
    FontPath "/usr/share/fonts/TTF/"
    FontPath "/usr/share/fonts/freefont/"
    FontPath "/usr/share/fonts/TrueType/"
    FontPath "/usr/share/fonts/corefonts"
    FontPath "/usr/share/fonts/Speedo/"
    FontPath "/usr/share/fonts/Type1/"
    FontPath "/usr/share/fonts/100dpi/"
    FontPath "/usr/share/fonts/75dpi/"
    FontPath "/usr/share/fonts/terminus/"
    FontPath "/usr/share/fonts/encodings/"
EndSection

Section "ServerFlags"
    Option     "AllowMouseOpenFail" "True"
    Option     "BlankTime" "0"
    Option     "StandbyTime" "0"
    Option     "SuspendTime" "0"
    Option     "OffTime" "0"
%(SEC_JAIL)s
EndSection

Section "InputDevice"
    Identifier "Keyboard0"
    Driver     "kbd"
    Option     "AutoRepeat" "500 30"
    Option     "XkbModel" "pc105"
    Option     "XkbLayout" "%(KEYMAP)s"
EndSection

Section "InputDevice"
    Identifier "Mouse0"
    Driver     "mouse"
    Option     "Protocol" "ExplorerPS/2"
    Option     "Device" "/dev/input/mice"
    Option     "ZAxisMapping" "4 5 6 7"
    Option     "Buttons" "5"
EndSection

%(SEC_SYNAPTICS)s
%(SEC_VIDEOCARD)s
%(SEC_MONITOR)s
%(SEC_SCREEN)s

Section "ServerLayout"
    Identifier  "Simple Layout"
    Screen      "Screen0"
    InputDevice "Mouse0" "CorePointer"
    %(SYNAPTICS_LAY)s
    InputDevice "Keyboard0" "CoreKeyboard"
    # Multihead stuff
    # Screen      0  "Screen0" 0 0
    # Screen      1  "Screen1" RightOf "Screen0"
    Option      "Xinerama" "off"
    Option      "Clone" "off"
    %(AIGLX_OPTS)s
EndSection
"""


### API ###
def unlink(path):
    try:
        os.unlink(path)
    except:
        pass

def touch(_file):
    try:
        if not os.path.exists(_file):
            file(_file, "w").close()
    except:
        pass

def backup(_file):
    try:
        if os.path.exists(_file):
            os.rename(_file, "%s-backup" % _file)
        out.sect("Wrote backup %s-backup" % _file)
        return True
    except:
        out.warn("Could not backup %s" % _file)
        return False

def getDate():
    return time.ctime()

def getChecksum(_data):
    return sha.sha(_data).hexdigest()

def saveActiveCard(cards):
    f = file(activeCard, "w")
    for card in cards:
        f.write("%s\n" % card.PciId)
    f.close()

def capture(*cmd):
    a = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    return a.communicate()

def run(*cmd):
    f = file("/dev/null", "w")
    return subprocess.call(cmd, stdout=f, stderr=f)

def grepini(lines, sect, key):
    flag = 0
    for line in lines:
        if flag == 0:
            if line.find(sect) != -1:
                flag = 1
        else:
            if line.find(key) != -1:
                return line.split()[-1].strip('"')
    return None

def atoi(s):
    # python's int() borks when given non integer characters
    t = ""
    for c in s.lstrip():
        if c in "0123456789":
            t += c
        else:
            break
    try:
        ret = int(t)
    except:
        ret = 0
    return ret

def write_file(fname, _data):
    out.sect("Writing data to %s" % fname)
    f = file(fname, "w")
    f.write(_data)
    f.close()

def sysValue(path, dir, _file):
    f = file(os.path.join(path, dir, _file))
    data = f.read().rstrip('\n')
    f.close()
    return data

def lremove(str, pre):
    if str.startswith(pre):
        return str[len(pre):]
    return str

def loadFile(_file):
    try:
        f = file(_file)
        d = [a.lstrip().rstrip("\n") for a in f]
        d = filter(lambda x: not (x.startswith("#") or x == ""), d)
        f.close()
        return d
    except:
        return []

class OUT:
    def __init__(self):
        if colorout:
            self.NORMAL = '\x1b[37;0m'
            self.BOLD = '\x1b[37;01m'
            self.MARK = '\x1b[36;01m'
            self.WARN = '\x1b[35m'
            self.WARNMSG = '\x1b[35;01m'
            self.ERROR = '\x1b[31m'
            self.ERRORMSG = '\x1b[31;01m'
        else:
            self.NORMAL = ''
            self.BOLD = ''
            self.MARK = ''
            self.WARN = ''
            self.WARNMSG = ''
            self.ERROR = ''
            self.ERRORMSG = ''

        self.type_sect = "%s-> " % self.MARK
        self.type_info = "%s   " % self.NORMAL
        self.type_warn = "%sWW " % self.WARN
        self.type_error  = "%sEE " % self.ERROR

    def _write(self, type, msg):
        print "%s %s%s" % (type, msg, self.NORMAL)

    def sect(self, msg):
        if debug:
            self._write(self.type_sect, "%s%s" % (self.BOLD, msg))

    def info(self, msg):
        if debug:
            self._write(self.type_info, msg)

    def warn(self, msg):
        self._write(self.type_warn, "%s%s" % (self.WARNMSG, msg))

    def error(self, msg):
        self._write(self.type_error, "%s%s" % (self.ERRORMSG, msg))
        sys.exit(1)


### Modeline Calculation ###
def GetInt(name, dict, default=0):
    _str = dict.get(name , default)
    try:
        return int(_str)
    except:
        return default

# _ GetFloat ___________________________________________________________
def GetFloat(name, dict, default=0.0):
    _str = dict.get(name , default)
    try:
        return float(_str)
    except:
        return default


# _ ModeLine ___________________________________________________________
def ModeLine(dict={}):
    '''
    This routine will calculate XF86Config Modeline entries.
    The Parameters are supplies as a dictionary due to the large number.
    The Calculated values are also returned in dictionary form.

    The parameter dictionary entries are:
    hPix       Horizontal displayed pixels    Default: 1280)
    hSync      Horizontal sync in uSec        Default: 1)
    hBlank     Horizontal blanking in uSec    Default: 3)
    vPix       Vertical displayed pixels      Default: 960)
    vFreq      Vertical scan frequency in Hz  Default: 75)
    vSync      Vertical sync in uSec          Default: 0)
    vBlank     Vertical blanking in uSec      Default: 500)
    v4x3       Constrain h/v to 4/3           Default: 0 (not constrained)

    hRatio1    Horizontal front poarch ratio  Default: 1)
    hRatio2    Horizontal sync ratio          Default: 4)
    hRatio3    Horizontal back poarch ratio   Default: 7)
    vRatio1    Vertical front poarch ratio    Default: 1)
    vRatio2    Vertical sync ratio            Default: 1)
    vRatio3    Vertical back poarch ratio     Default: 10)

    If v4x3="1" vPix is ignored.

    If any of the following:hSync, hBlanking, vSync, vBlanking
    are not specified then they are set based on the ratios,
    at a minimum is is best to specify either sync or blanking.

    The return dictionary entries are:
    The "entry" value is really all that is needed
    entry     Modeline entry string

    These are the values that make up the modeline entry
    dotClock    Dot clock in MHz
    hPix        Horizontal displayed pixels
    hFreq       Horizontal scan frequency in Hz.
    hTim1       Horizontal front poarch pixels
    hTim2       Horizontal sync pixels
    hTim3       Horizontal back poarch pixels
    vPix        Vertical displayed pixels
    vFreq       Vertical scan frequency in Hz.
    vTim1       Vertical front poarch pixels
    vTim2       Vertical sync pixels
    vTim3       Vertical back poarch pixels
    '''
    results = {}
    hPix    = GetInt(  "hPix"    , dict, 1280)
    hSync   = GetFloat("hSync"   , dict, 1)
    hBlank  = GetFloat("hBlank"  , dict, 3)
    hRatio1 = GetFloat("hRatio1" , dict, 1)
    hRatio2 = GetFloat("hRatio2" , dict, 4)
    hRatio3 = GetFloat("hRatio3" , dict, 7)
    vPix    = GetInt(  "vPix"    , dict, 960)
    vFreq   = GetFloat("vFreq"   , dict, 75)
    vSync   = GetFloat("vSync"   , dict, 0)
    vBlank  = GetFloat("vBlank"  , dict, 500)
    vRatio1 = GetFloat("vRatio1" , dict, 1)
    vRatio2 = GetFloat("vRatio2" , dict, 1)
    vRatio3 = GetFloat("vRatio3" , dict, 10)
    if (dict.has_key("v4x3")    == 0):
        v4x3        = ""
    else:
        v4x3        = "checked"
        vPix        = int(hPix) / 4 * 3

    vSyncUs = vSync / 1000000.0
    vBlankUs = vBlank / 1000000.0

    vRatioT = vRatio1 + vRatio2 + vRatio3
    if   ((vSyncUs > 0.0) and (vBlankUs > 0.0)):
        vRatio2 = (vRatio1 + vRatio3) * (vSyncUs / (vBlankUs - vSyncUs))
        vRatioT = vRatio1 + vRatio2 + vRatio3
    elif ((vSyncUs > 0.0) and (vBlankUs <= 0.0)):
        vBlankUs = vSyncUs * (vRatioT / vRatio2)
    elif ((vSyncUs <= 0.0) and (vBlankUs > 0.0)):
        vSyncUs = vBlankUs * (vRatio2 / vRatioT)

    vBase = 1.0 / vFreq
    vBase = (vPix / (vBase - vBlankUs)) * vBase
    vBase = (vBase - vPix) / vRatioT

    vTim1 = vPix  + int((vBase * vRatio1) + 1.0)
    vTim2 = vTim1 + int((vBase * vRatio2) + 1.0)
    vTim3 = vTim2 + int((vBase * vRatio3) + 1.0)

    hFreq    = (vTim3 * vFreq)

    hSyncUs  = hSync / 1000000.0
    hBlankUs = hBlank / 1000000.0

    hPix    = ((hPix + 7) / 8) * 8

    hRatioT = hRatio1 + hRatio2 + hRatio3
    if   ((hSyncUs > 0.0) and (hBlankUs > 0.0)):
        hRatio2 = (hRatio1 + hRatio3) * (hSyncUs / (hBlankUs - hSyncUs))
        hRatioT = hRatio1 + hRatio2 + hRatio3
    elif ((hSyncUs > 0.0) and (hBlankUs <= 0.0)):
        hBlankUs = hSyncUs * (hRatioT / hRatio2)
    elif ((hSyncUs <= 0.0) and (hBlankUs > 0.0)):
        hSyncUshBlankUs = hBlankUs * (hRatio2 / hRatioT)

    hBase = 1.0 / hFreq
    hBase = (hPix / (hBase - hBlankUs)) * hBase
    hBase = (hBase - hPix) / hRatioT

    hTim1 = hPix  + ((int((hBase * hRatio1)+8.0) / 8) * 8)
    hTim2 = hTim1 + ((int((hBase * hRatio2)+8.0) / 8) * 8)
    hTim3 = hTim2 + ((int((hBase * hRatio3)+8.0) / 8) * 8)

    dotClock = (hTim3 * vTim3 * vFreq) / 1000000.0

    hFreqKHz = hFreq / 1000.0

    results = {}
    results["entry"]    = '''\
# %(hPix)dx%(vPix)d @ %(vFreq)dHz, %(hFreqKHz)6.2f kHz hsync
    Mode "%(hPix)dx%(vPix)d"
        DotClock  %(dotClock)8.2f
        HTimings  %(hPix)d %(hTim1)d %(hTim2)d %(hTim3)d
        VTimings  %(vPix)d %(vTim1)d %(vTim2)d %(vTim3)d
    EndMode\
    ''' % vars()
    results["hPix"]     = hPix
    results["vPix"]     = vPix
    results["vFreq"]    = vFreq
    results["hFreq"]    = hFreq
    results["dotClock"] = dotClock
    results["hTim1"]    = hTim1
    results["hTim2"]    = hTim2
    results["hTim3"]    = hTim3
    results["vTim1"]    = vTim1
    results["vTim2"]    = vTim2
    results["vTim3"]    = vTim3

    return results

def calcModeLine(w, h, vfreq):
    vals = {}
    vals["hPix"] = w
    vals["vPix"] = h
    vals["vFreq"] = vfreq
    m = ModeLine(vals)
    return m["entry"]


### Mambo jambo starts here ###
class Device:
    def __init__(self):
        self.Driver = None
        self.VendorName = "Unknown"
        self.BoardName = "Unknown"
        self.BusId = ""
        self.PciId = ""

class Monitor:
    def __init__(self):
        self.wide = 0
        self.panel_w = 0
        self.panel_h = 0
        self.hsync_min = 0
        self.hsync_max = 0
        self.vref_min = 0
        self.vref_max = 0
        self.modelines = []
        self.res = ""
        self.vendorname = "Unknown"
        self.modelname = "Unknown"
        self.eisaid = ""
        self.depth = "16"

class intelWorkaround:
    def __init__(self):
        self.biosmodes = {}
        self.cfgmodes = {}

    def _readconfig(self):
        _dict = {}
        for line in loadFile("/etc/conf.d/915resolution"):
            if "=" in line:
                k, v = line.split("=", 1)
                k = k.strip()
                v = v.strip()
                if v.startswith('"') or v.startswith("'"):
                    v = v[1:-1]
                if " " in v:
                    _dict[k] = v

        return _dict

    def _getbiosmodes(self):
        _dict = {}
        f = capture("/usr/sbin/915resolution", "-l")[0]
        for line in f.split("\n"):
            if line.startswith("Mode") and not line.startswith("Mode Table"):
                g1, m, g2, res, depth, g3 = line.split(" ", 5)
                _dict[m] = "%s %s" % (res.replace("x", " ")[:-1], depth)

        return _dict

    def listbiosmodes(self):
        self.biosmodes = self._getbiosmodes()
        return self.biosmodes

    def replacemodes(self):
        out.sect("Setting Intel BIOS modes")
        self.cfgmodes = self._readconfig()
        for k in self.cfgmodes:
            cmd = ["/usr/sbin/915resolution", k]
            out.info("%s as %s" % (k, self.cfgmodes[k]))
            cmd.extend(self.cfgmodes[k].split())
            run(*cmd)


def getKernelOpt(cmdopt=None):
    if cmdopt:
        for cmd in "".join(loadFile("/proc/cmdline")).split():
            if cmd.startswith("%s=" % cmdopt):
                return cmd[len(cmdopt)+1:].split(",")
    else:
        return "".join(loadFile("/proc/cmdline")).split()

    return ""

def xisrunning():
    if os.path.exists(xorg_lock):
        return True
    else:
        return False

def intel(_type="fix"):
    i = intelWorkaround()

    if _type == "list":
        _modes = i.listbiosmodes()
        keys = _modes.keys()
        keys.sort()
        for k in keys:
            print "Mode %s = %s bits/pixel" % (k, _modes[k].replace(" ", "x", 1).replace(" ", "\t", 1))
    else:
        i.replacemodes()

def listAvailableDrivers(d = driver_path):
    a = []
    if os.path.exists(d):
        for drv in os.listdir(d):
            if drv.endswith("_drv.so"):
                if drv[:-7] not in a:
                    a.append(drv[:-7])
    return a

def queryDriver(vendor, device):
    available_drivers = listAvailableDrivers()
    for line in loadFile(xdriverlist):
        if line.startswith(vendor + device):
            drv = line.rstrip("\n").split(" ")[1]
            if drv in available_drivers:
                return drv
    return None

def queryPCI(vendor, device):
    f = file("/usr/share/misc/pci.ids")
    flag = 0
    company = ""
    for line in f.readlines():
        if flag == 0:
            if line.startswith(vendor):
                flag = 1
                company = line[5:].strip()
        else:
            if line.startswith("\t"):
                if line.startswith("\t" + device):
                    return line[6:].strip(), company
            elif not line.startswith("#"):
                flag = 0
    return None, None

def findPciCards():
    cards = []
    out.sect("Probing PCI bus for video cards")

    # read only PCI for now, follow sysfs changes
    for bus in ["pci"]:
        sysDir = os.path.join("/sys/bus", bus, "devices")
        if os.path.isdir(sysDir):
            for _dev in os.listdir(sysDir):
                try:
                    if sysValue(sysDir, _dev, "class").startswith("0x03"):
                        a = Device()
                        vendorId = lremove(sysValue(sysDir, _dev, "vendor"), "0x")
                        deviceId = lremove(sysValue(sysDir, _dev, "device"), "0x")
                        busId = tuple(int(x, 16) for x in _dev.replace(".",":").split(":"))[1:4]

                        a.BusId = '# BusID      "PCI:%d:%d:%d"' % busId
                        a.BoardName, a.VendorName =  queryPCI(vendorId, deviceId)
                        a.Driver = queryDriver(vendorId, deviceId)
                        a.PciId = "%s:%s" % (vendorId,deviceId)
                        cards.append(a)

                        out.info("PCI BUS = %s" % _dev)
                        out.info("PCI ID  = %s" % a.PciId)
                        out.info("Vendor  = %s" % a.VendorName)
                        out.info("Device  = %s" % a.BoardName)
                        out.info("Driver  = %s" % a.Driver)

                except:
                    pass

    if len(cards):
        return cards
    else:
        # This machine might be a terminal server with no video cards.
        # We start X and leave the decision to the user.
        sys.exit(0)

def queryPanel(mon):
    if xisrunning():
        out.sect("Not querying panel, X is running")
        return None
    else:
        patterns = [
        "Panel size is",
        "Panel Size is",
        "Panel Size from BIOS:",
        "Panel size: ",
        "Panel Native Resolution is ",
        "Panel is a ",
        "Detected panel size via",
        "Detected panel size via BIOS: ",
        "Size of device LFP (local flat panel) is",
        "Size of device LFP",
        "Size of device DFP",
        "Virtual screen size determined to be ",
        "Detected LCD/plasma panel ("
        ]

        out.sect("Querying panel with X")
        a = run("/usr/bin/X", "-probeonly", "-allowMouseOpenFail", "-logfile", "/var/log/xlog")
        if a != 0:
            out.warn("X -probeonly failed")
            return

        f = file("/var/log/xlog")
        for line in f.readlines():
            for p in patterns:
                if p in line:
                    b = line[line.find(p)+len(p):]
                    mon.panel_w = atoi(b)
                    b = b[b.find("x")+1:]
                    mon.panel_h = atoi(b)
                    out.info("found %s x %s" % (mon.panel_w, mon.panel_h))
                    break
        f.close()
        return None

def queryDDC():
    mon = Monitor()

    out.sect("Probing DDC")
    ddc = capture("/usr/sbin/ddcxinfos")
    if ddc[1] != '':
        out.warn("Could not probe DDC info")
        return mon

    for line in ddc[0].split("\n"):
        t = line.find("truly")
        if t != -1:
            mon.wide = atoi(line[t+6:])
        t = line.find("EISA ID=")
        if t != -1:
            mon.eisaid = line[line.find("EISA ID=")+8:].upper().strip()
        t = line.find("kHz HorizSync")
        if t != -1:
            mon.hsync_min = atoi(line)
            mon.hsync_max = atoi(line[line.find("-") + 1:])
        t = line.find("Hz VertRefresh")
        if t != -1:
            mon.vref_min = atoi(line)
            mon.vref_max = atoi(line[line.find("-") + 1:])
        if line[:8] == "ModeLine":
            mon.modelines.append("    %s\n" % line)

    if mon.hsync_max == 0 or mon.vref_max == 0:
        # in case those not probed separately, get them from modelines
        freqs = filter(lambda x: x.find("hfreq=") != -1, ddc[1])
        if len(freqs) > 1:
            line = freqs[0]
            mon.hsync_min = atoi(line[line.find("hfreq=") + 6:])
            mon.vref_min = atoi(line[line.find("vfreq=") + 6:])
            line = freqs[-1]
            mon.hsync_max = atoi(line[line.find("hfreq=") + 6:])
            mon.vref_max = atoi(line[line.find("vfreq=") + 6:])

    if mon.eisaid != "":
        for line in loadFile(MonitorsDB):
            l = line.split(";")
            if mon.eisaid == l[2].strip().upper():
                mon.vendorname = l[0].lstrip()
                mon.modelname = l[1].lstrip()
                mon.hsync_min, mon.hsync_max = l[3].strip().split("-")
                mon.vref_min, mon.vref_max = l[4].strip().split("-")

    for m in mon.modelines:
        t = m[m.find("ModeLine"):].split()[1]
        if t not in mon.res:
            mon.res = t + " " + mon.res

    out.info("EISAID     = %s" % mon.eisaid)
    out.info("Monitor    = %s - %s" % (mon.vendorname, mon.modelname))
    out.info("Horizontal = %s - %s kHz" % (mon.hsync_min, mon.hsync_max))
    out.info("Vertical   = %s - %s Hz" % (mon.vref_min, mon.vref_max))
    out.info("Resolution = %s" % mon.res)

    if mon.res == "":
        mon.res = '"800x600" "640x480"'

    return mon

def queryTouchpad():
    out.sect("Querying Touchpad devices")
    try:
        a = file("/proc/bus/input/devices")
        for line in a.readlines():
            # Frequently check if kernel does not break anything
            if "SynPS/2" in line:
                out.info("Found Synaptics Touchpad")
                return "synaptics"
            elif "AlpsPS/2" in line:
                out.info("Found Alps Touchpad")
                return "alps"
        a.close()
    except:
        pass
    return ""

def getKeymapList():
    return os.listdir(xkb_path)

def queryKeymap():
    # Fallback is trq
    kmap = default_kmap
    keymap_file = "/etc/mudur/keymap"
    try:
        if os.path.exists(keymap_file):
            kmap = file(keymap_file).read().strip().rstrip("\n")
    except:
        pass

    # workaround for pt_BR and some latin1 variants
    if "-" in kmap:
        kmap = kmap.split("-", 1)[0]

    if not kmap in getKeymapList():
        kmap = default_kmap

    out.sect("Keymap set to %s" % kmap)
    return kmap

def findMonitors(cards):
    monitors = []
    # FIXME: modify ddcxinfos to probe for more monitors
    # probe monitor freqs, for the first monitor for now
    mon = queryDDC()

    # defaults for the case where ddc fails
    if mon.hsync_min == 0 or mon.vref_min == 0:
        mon.hsync_min = 31.5
        mon.hsync_max = 50
        mon.vref_min = 50
        mon.vref_max = 70

    # check lcd panel
    if cards[0].Driver in lcd_drivers:
        write_tmpl({ "PROBE_DRIVER": cards[0].Driver }, _type = "probe")
        queryPanel(mon)

    monitors.append(mon)
    return monitors

def keysVideoCards(cards):
    sec = ""
    for i in range(len(cards)):
        keys_vc = {}
        keys_vc["N"] = str(i)
        keys_vc["DRIVER"] = cards[i].Driver
        keys_vc["VENDORNAME"] = cards[i].VendorName
        keys_vc["BOARDNAME"] = cards[i].BoardName
        keys_vc["BUSID"] = cards[i].BusId 

        keys_vc["AIGLX_OPTS"] = ""

        if "enable_composite" in getKernelOpt():
            if cards[i].Driver in ("ati", "intel"):
                keys_vc["AIGLX_OPTS"] = 'Option "XAANoOffscreenPixmaps" "true"'

            elif cards[i].Driver == "nvidia":
                keys_vc["AIGLX_OPTS"] = template_nvidia_aiglx

        sec += template_videocard % keys_vc
    return sec

def keysMonitors(monitors, cards):
    sec_monitor = ""
    sec_screen = ""
    for i in range(len(monitors)):
        keys_mon = {}
        keys_mon["N"] = str(i)
        keys_mon["VENDOR"] = monitors[i].vendorname
        keys_mon["MODEL"] = monitors[i].modelname
        keys_mon["HSYNC"] = str(monitors[i].hsync_min) + "-" + str(monitors[i].hsync_max)
        keys_mon["VREF"] = str(monitors[i].vref_min) + "-" + str(monitors[i].vref_max)

        if monitors[i].panel_h and monitors[i].panel_w:
            if monitors[i].eisaid != "":
                keys_mon["MODELINES"] = ""
            else:
                keys_mon["MODELINES"] = calcModeLine(monitors[i].panel_w, monitors[i].panel_h, 60)
            keys_mon["MODES"] = '"%dx%d" "800x600" "640x480"' % (monitors[i].panel_w, monitors[i].panel_h)
        else:
            if monitors[i].eisaid != "":
                keys_mon["MODELINES"] = ""
            else:
                keys_mon["MODELINES"] = "".join(monitors[i].modelines)
            keys_mon["MODES"] = monitors[i].res

        # check for the driver name and set depth due
        if cards[i].Driver in truecolor_cards:
            keys_mon["DEPTH"] = "24"
        else:
            keys_mon["DEPTH"] = "16"

        if cards[i].Driver == "ati" and "enable_composite" in getKernelOpt():
            keys_mon["DEPTH"] = "24"

        sec_monitor += template_monitor % keys_mon
        sec_screen += template_screen % keys_mon

    return sec_monitor, sec_screen

def keysTouchpad(keys_main):
    tp = queryTouchpad()
    if tp in touchpad_devices:
        keys_main["SYNAPTICS_MOD"] = 'Load "synaptics"'
        keys_main["SYNAPTICS_LAY"] = 'InputDevice "Touchpad" "SendCoreEvents"'
        if tp == "synaptics":
            keys_main["SEC_SYNAPTICS"] = template_synaptics
        elif tp == "alps":
            keys_main["SEC_SYNAPTICS"] = template_alps
    else:
        keys_main["SYNAPTICS_MOD"] = ""
        keys_main["SEC_SYNAPTICS"] = ""
        keys_main["SYNAPTICS_LAY"] = ""

def isVirtual():
    # Xen detection
    if os.path.exists("/proc/xen/capabilities"):
        # we are in dom0, act like normal system
        out.sect("We are in Xen dom0")
        if loadFile("/proc/xen/capabilities") == []:
            # and in domU, configure X to use fbdev if exists
            out.info("and in Xen domU")
            return True
    return False

def getJail():
    if not "nojail" in getKernelOpt("xorg"):
        if "thin" in getKernelOpt("mudur") or "jail" in getKernelOpt("xorg"):
            out.sect("Jail is enabled")
            return template_jail
    return ""

def write_tmpl(_keys, _type = "normal"):
    if _type == "probe":
        # temporary template for probing with Xorg
        tmpl = template_probe_display
    else:
        # check if we are in jail
        _keys["SEC_JAIL"] = getJail()
        # add zorg info
        _keys["ZORG_VERSION"] = zorg_version
        _keys["DATE"] = getDate()
        # paranoia mode
        _keys["SUM"] = getChecksum(template_main % _keys)

        tmpl = template_header + template_main

    write_file(xorg_conf, tmpl % _keys)

def updateOpenGL(driver):
    if "livecd" in getKernelOpt("mudur"):
        return

    impls = {
        "fglrx"     : "ati",
        "nvidia"    : "nvidia"
    }

    ret = capture("/sbin/update-opengl", "--get-implementation")
    oldImpl = ret[0].rstrip()
    newImpl = impls.get(driver, "xorg-x11")

    if oldImpl != newImpl:
        run("/sbin/update-opengl", newImpl);

# om call
def autoConfigure():
    out.sect("Autodetecting devices")
    # detect graphic card and find monitor of first card
    cards = findPciCards()

    # if could not find driver from driverlist try X -configure
    if not cards[0].Driver:
        out.warn("Videocard driver unknown, trying to probe with X")
        a = run("/usr/bin/X", "-configure", "-logfile", "/var/log/xlog")
        if a != 0:
            out.error("X -configure failed!")
        home = os.getenv("HOME", "")
        f = file(home + "/xorg.conf.new")
        conf = f.readlines()
        f.close()
        unlink(home + "/xorg.conf.new")
        cards[0].Driver = grepini(conf, 'Section "Device"', "\tDriver")
        out.info("found %s" % cards[0].Driver)

    # use nvidia if nv is found
    available_drivers = listAvailableDrivers()
    if "nvidia" in available_drivers:
        for i in range(len(cards)):
            if cards[i].Driver == "nv":
                out.info("changing card[%i] nv driver to nvidia" % i)
                cards[i].Driver = "nvidia"

    # use openchrome if via is found
    if "openchrome" in available_drivers:
        for i in range(len(cards)):
            if cards[i].Driver == "via":
                out.info("changing card[%i] via driver to openchrome" % i)
                cards[i].Driver = "openchrome"

    # save active cards for checking next boots.
    saveActiveCard(cards)

    # we need card data to check for lcd displays
    monitors = findMonitors(cards)

    # start over and begin to fill the templates for final xorg.conf
    keys_main = {}

    # with gfx first, we write all cards
    keys_main["SEC_VIDEOCARD"] = keysVideoCards(cards)

    # and then the monitor and screen settings
    keys_main["SEC_MONITOR"], keys_main["SEC_SCREEN"] = keysMonitors(monitors, cards)

    # input devices, we have to use mainkeys for touchpad as it changes all over the config
    keysTouchpad(keys_main)
    keys_main["KEYMAP"] = queryKeymap()

    # Enable composite extension if requested
    keys_main["AIGLX_OPTS"] = ""

    if "enable_composite" in getKernelOpt():
        keys_main["COMPOSITE"] = composite_option

        if cards[0].Driver in ("ati", "intel"):
            keys_main["AIGLX_OPTS"] = 'Option "AIGLX" "true"'

    else:
        keys_main["COMPOSITE"] = '#%s' % composite_option

    write_tmpl(keys_main)

    updateOpenGL(cards[0].Driver)

def safeConfigure(_driver = "vesa"):
    # set failsafe graphics card
    safedrv = _driver.upper()
    out.sect("Setting up %s 800x600 config" % safedrv)
    cards = []

    a = Device()
    a.BoardName = "%s Configured Board" % safedrv
    a.VendorName = "%s Configured Vendor" % safedrv
    a.Driver = _driver
    cards.append(a)

    # set failsafe monitor stuff
    monitors = []
    mon = Monitor()

    mon.vendorname = "%s Configured Vendor" % safedrv
    mon.modelname = "%s Configured Model" % safedrv

    mon.hsync_min = 31.5
    mon.hsync_max = 50
    mon.vref_min = 50
    mon.vref_max = 70
    mon.res = '"800x600" "640x480"'

    monitors.append(mon)

    # start over and begin to fill the templates
    keys_main = {}

    # with gfx first
    keys_main["SEC_VIDEOCARD"] = keysVideoCards(cards)

    # and then the monitor
    keys_main["SEC_MONITOR"], keys_main["SEC_SCREEN"] = keysMonitors(monitors, cards)

    # input devices
    keys_main["KEYMAP"] = queryKeymap()
    keys_main["SYNAPTICS_MOD"] = ""
    keys_main["SEC_SYNAPTICS"] = ""
    keys_main["SYNAPTICS_LAY"] = ""

    keys_main["AIGLX_OPTS"] = ""
    keys_main["COMPOSITE"] = '#%s' % composite_option

    write_tmpl(keys_main)

    updateOpenGL(_driver)

def activeCardChanged(cards):
    out.sect("Videocards changed, reconfiguring X")
    backup(xorg_conf)
    saveActiveCard(cards)

def checkActiveCard():
    out.sect("Checking if video cards have changed")
    cards = findPciCards()

    # if there are no pci cards on the machine, we write an empty state file, hence we can start
    # kdm and cards will be probed again in the next boot. This is not nice, but may be useful
    # in hardware error cases or autoprobing device changes.
    if not len(cards):
        saveActiveCard(cards)
    elif os.path.exists(activeCard):
        activeCards = file(activeCard,'r').readlines()
        if len(activeCards) != len(cards):
            activeCardChanged(cards)
            return
        for i in range(len(activeCards)):
            if not cards[i].PciId == activeCards[i].strip("\n"):
                activeCardChanged(cards)
                return
    else:
        # For the first time
        out.sect("Saving active PCI card IDs for the first time")
        saveActiveCard(cards)

def startNormal():
    if not isVirtual():
        if xisrunning():
            out.error("Xorg is running, please stop it first")
        else:
            intel("fix")
            checkActiveCard()
            if not os.path.exists(xorg_conf):
                autoConfigure()
            else:
                out.warn("%s exists, doing nothing" % xorg_conf)
    else:
        if not os.path.exists(xorg_conf):
            if os.path.exists("/dev/fb/0"):
                safeConfigure("fbdev")

def info():
    if xisrunning():
        out.warn("Xorg is running, info might not be accurate")
    queryTouchpad()
    findPciCards()
    queryDDC()

def boot():
    cmds = getKernelOpt("xorg")
    if "off" in cmds:
        sys.exit(1)
    elif "probe" in cmds:
        if backup(xorg_conf):
            startNormal()
        else:
            sys.exit(1)
    elif "safe" in cmds:
        if backup(xorg_conf):
            safeConfigure()
        else:
            sys.exit(1)
    else:
        startNormal()


if __name__ == "__main__":
    # running from command line
    parser = OptionParser(description = "%s version %s" % (zorg_info, zorg_version))
    parser.add_option("-d", "--debug", action="store_true", dest="debug",
                      default=False, help="print extra debug info")
    parser.add_option("-n", "--no-color", action="store_false", dest="colorout",
                      default=True, help="do not print colorized output")
    parser.add_option("-s", "--safe", action="store_true", dest="safe",
                      default=False, help="setup VESA 800x600 config without probing hardware")
    parser.add_option("-p", "--probe", action="store_true", dest="probe",
                      default=False, help="force probing all devices, even if %s exists" % xorg_conf)
    parser.add_option("-i", "--info", action="store_true", dest="info",
                      default=False, help="print video, monitor and input info, no advanced probing is done")
    parser.add_option("--boot", action="store_true", dest="boot",
                      default=False, help="used when called from a service on system boot")
    parser.add_option("--intelfix", action="store_true", dest="intelfix",
                      default=False, help="run Intel BIOS bug workaround")
    parser.add_option("--intellist", action="store_true", dest="intellist",
                      default=False, help="list available BIOS modes for Intel cards")

    opts, args = parser.parse_args()
    debug = opts.debug
    colorout = opts.colorout
    out = OUT()

    if opts.boot:
        boot()
    elif opts.safe:
        if backup(xorg_conf):
            safeConfigure()
        else:
            sys.exit(1)
    elif opts.probe:
        if backup(xorg_conf):
            startNormal()
        else:
            sys.exit(1)
    elif opts.info:
        debug = True
        info()
    elif opts.intelfix:
        intel("fix")
    elif opts.intellist:
        intel("list")
    else:
        startNormal()


